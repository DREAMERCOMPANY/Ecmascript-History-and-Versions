* HISTORIA Y VERSIONES DE JAVASCRIPT

1950 => Inicio de las computadoras

1969 => Se creo la red ARPANET,

1970-1990  => Se explora ARPANET

1990 => Tim Berners.lee dio pauta al internet y se conocio el termino World Wide Web (forma de acceder a archivos, documentos enlaces al alcanze de todos)

1993 => Nacimiento de un Navegador.

Universitarios pioneros escribieron un sofware simple que inicio una revolucion.

Marc Andreessen: le dio vida a una gran empresa

Netscape: Tenia un navegador que podias acceder a internet (HTML simple, enlaces, algunas fotografias)

Browser wars: Guerra de los navegadores Microsoft en 1995 lanzó Internet Explorer, en la guerra nacieron tecnologias como CSS, conceptos como la empresa mozilla y JS. JS: Apareció en 4 de diciembre de 1995 Diseñado por Netscape Communications, Fundación Mozilla.

Su primer nombre fue Mocha

Luego LiveScript

Finalmente JavaScript.

Microsoft no se podia quedar atras y lanzo JScript y por eso tenermos ECMAScript (1997) permitio un estandar (serie de reglas que va a tener los lenguajes de programacion).

* ¿QUE ES EL TC-39?

++TC39:++ Es un grupo de hackers, academicos y/o personas afines a la tecnologia que se encargan de las actualizaciones, bajo el mando de ECMA. ++ESNext++ es un nombre que siempre indica la próxima versión de javascript y esto consta de los siguientes pasos:

Stage0: Strawperson (borrador, cualquier persona puede tener una idea para implementar en el estandar)

Stage1: Proposal (propuesta formal)

Stage2: Draft (borrador, como va a funcionar la implementacion el impacto entre otros)

Stage3: Candidate (se elige el candidato, vamos a tener una propuesta que va ayudar a mejorar el lenguaje.)

Stage4: Finished (va a ser desplegada en la version normalmente en JUNIO)

=> Let, const var:
    * Let y var se pueden declarar, asignar y reasignar
    * const no se puede reasignar pero si se puede declarar y asignar
    * let y const son de alcance de bloque ({})
    * Var es de alcance de funcion (function)

=> Arrow Functions:
    * Las arrow functions se crean con una variable que almacena una funcion () (const a = ()=>{}).
    * Cuando solo se quiere devolver un resultado las arrow functions ya tienen el return implicito.

=> Promesas:
    * Es una forma de trabajar el asincronismo, desde los callbacks, las promesas y async-await.
    * Es algo que va a pasar; puede ser hoy, mañana o nunca.
    * Curso de asincronismo en JS.
    * La promesa retorna dos valores, Result o Reject.

=> Clases:
    * Las clases en JS, introducidas en ECMAScript-6, Es una mejora sintactica sobre la herencia (POO).
    * Esta basada en prototipos
    * No introduce nada nuevo al modelo de la herencia.
    * Cuando se crea la instancia de una clase lo primero que se llama es al metodo constructor.
    * 'This', Hace referencia al elemento padre que lo contiene.
    * Son una forma en la que podemos trabajar.
    * Getters, Setters.

=> Modulos:
    * Nueva caracteristicas que permiten ser representados como Modulos
    * Palabras reservadas 'Import' , 'Export'

=> Generator:
    * Nos permite tener una funcion de tipo especial
    * Es un tipo de iterador personalizado y define un algoritmo iterativo, mantiene el estado.

=> Set-add:
    * set no admite valores repetidos.



